/**
 * The library definitions for most libraries are autogenerated by the AboutLibraries plugin.
 * This file is only for TeamNewPipe-related libraries.
 */

package org.schabi.newpipe.ui.components.about

import android.content.Context
import com.mikepenz.aboutlibraries.entity.Developer
import com.mikepenz.aboutlibraries.entity.Library
import com.mikepenz.aboutlibraries.entity.License
import com.mikepenz.aboutlibraries.entity.Scm
import kotlinx.collections.immutable.ImmutableSet
import kotlinx.collections.immutable.toImmutableList
import kotlinx.collections.immutable.toImmutableSet
import org.schabi.newpipe.BuildConfig
import org.schabi.newpipe.R

val SPDX_ID_TO_ASSET_PATH = mapOf(
    "Apache-2.0" to "apache2.html",
    "EPL-1.0" to "epl1.html",
    "GPL-3.0-only" to "gpl_3.html",
    "GPL-3.0-or-later" to "gpl_3.html",
    "MIT" to "mit.html",
    "MPL-2.0" to "mpl2.html",
)

fun getFirstPartyLibraries(
    context: Context,
    teamNewPipeLibraries: List<Library>,
): List<Library> {
    val gpl3 = setOf(
        License(
            name = "GNU General Public License v3.0",
            url = "https://www.gnu.org/licenses/gpl-3.0.txt",
            year = null,
            spdxId = "GPL-3.0-or-later",
            licenseContent = null,
            hash = "GPL-3.0-or-later",
        )
    ).toImmutableSet()

    val npeId = "com.github.TeamNewPipe:NewPipeExtractor"
    val npe = teamNewPipeLibraries.firstOrNull { it.uniqueId == npeId }

    return listOf(
        Library(
            uniqueId = BuildConfig.APPLICATION_ID,
            artifactVersion = BuildConfig.VERSION_NAME,
            name = context.getString(R.string.app_name),
            description = context.getString(R.string.app_description),
            website = context.getString(R.string.website_url),
            developers = listOf(
                Developer(
                    name = context.getString(R.string.team_newpipe),
                    organisationUrl = context.getString(R.string.website_url)
                )
            ).toImmutableList(),
            organization = null,
            scm = Scm(null, null, context.getString(R.string.github_url)),
            licenses = gpl3,
        ),
        Library(
            uniqueId = npeId,
            artifactVersion = npe?.artifactVersion,
            name = context.getString(R.string.newpipe_extractor),
            description = context.getString(R.string.newpipe_extractor_description),
            website = context.getString(R.string.newpipe_extractor_github_url),
            developers = listOf(
                Developer(
                    name = context.getString(R.string.team_newpipe),
                    organisationUrl = context.getString(R.string.website_url)
                )
            ).toImmutableList(),
            organization = null,
            scm = Scm(null, null, context.getString(R.string.newpipe_extractor_github_url)),
            licenses = gpl3,
        ),
    )
}

fun getAdditionalThirdPartyLibraries(
    context: Context,
    teamNewPipeLibraries: List<Library>,
    licenses: ImmutableSet<License>,
): List<Library> {
    val apache2 = licenses.firstOrNull { it.spdxId == "Apache-2.0" }
    val mit = licenses.firstOrNull { it.spdxId == "MIT" }
    val mpl2 = licenses.firstOrNull { it.spdxId == "MPL-2.0" }

    val nanojsonId = "com.github.TeamNewPipe:nanojson"
    val nanojson = teamNewPipeLibraries.firstOrNull { it.uniqueId == nanojsonId }
    val nnfpId = "com.github.TeamNewPipe:NoNonsense-FilePicker"
    val nnfp = teamNewPipeLibraries.firstOrNull { it.uniqueId == nnfpId }

    return listOf(
        Library(
            uniqueId = nnfpId,
            artifactVersion = nnfp?.artifactVersion,
            name = "NoNonsense-FilePicker",
            description = "A file/directory-picker for Android.",
            website = "https://github.com/TeamNewPipe/NoNonsense-FilePicker",
            developers = listOf(
                Developer(
                    name = "Jonas Kalderstam",
                    organisationUrl = "https://github.com/spacecowboy/NoNonsense-FilePicker",
                ),
                Developer(
                    name = context.getString(R.string.team_newpipe),
                    organisationUrl = context.getString(R.string.website_url)
                )
            ).toImmutableList(),
            organization = null,
            scm = Scm(null, null, "https://github.com/TeamNewPipe/NoNonsense-FilePicker"),
            licenses = listOfNotNull(mpl2).toImmutableSet(),
        ),
        Library(
            uniqueId = nanojsonId,
            artifactVersion = nanojson?.artifactVersion,
            name = "nanojson",
            description = "nanojson is a tiny, fast, and compliant JSON parser and writer for Java.",
            website = "https://github.com/TeamNewPipe/nanojson",
            developers = listOf(
                Developer(
                    name = "mmastrac",
                    organisationUrl = "https://github.com/mmastrac/nanojson",
                ),
                Developer(
                    name = context.getString(R.string.team_newpipe),
                    organisationUrl = context.getString(R.string.website_url)
                ),
            ).toImmutableList(),
            organization = null,
            scm = Scm(null, null, "https://github.com/TeamNewPipe/nanojson"),
            licenses = listOfNotNull(mit, apache2).toImmutableSet()
        ),
    )
}
