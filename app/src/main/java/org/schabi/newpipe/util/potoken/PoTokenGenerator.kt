package org.schabi.newpipe.util.potoken

import android.content.Context
import android.util.Log
import androidx.annotation.CallSuper
import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
import io.reactivex.rxjava3.core.Single
import io.reactivex.rxjava3.core.SingleEmitter
import io.reactivex.rxjava3.disposables.CompositeDisposable
import io.reactivex.rxjava3.schedulers.Schedulers
import org.schabi.newpipe.BuildConfig
import org.schabi.newpipe.DownloaderImpl
import java.io.Closeable
import java.time.Instant

/**
 * This interface was created to allow for multiple methods to generate poTokens in the future (e.g.
 * via WebView and via a local DOM implementation)
 */
abstract class PoTokenGenerator(
    protected val generatorEmitter: SingleEmitter<PoTokenGenerator>,
) : Closeable {

    protected val disposables = CompositeDisposable() // used only during initialization
    private lateinit var expirationInstant: Instant

    /**
     * Generates a poToken for the provided identifier, using the `integrityToken` and
     * `webPoSignalOutput` previously obtained in the initialization of [PoTokenWebView]. Can be
     * called multiple times.
     */
    abstract fun generatePoToken(identifier: String): Single<String>

    /**
     * @return whether the `integrityToken` is expired, in which case all tokens generated by
     * [generatePoToken] will be invalid
     */
    fun isExpired(): Boolean = Instant.now().isAfter(expirationInstant)

    interface Factory {
        /**
         * Initializes a [PoTokenGenerator] by loading the BotGuard VM, running it, and obtaining
         * an `integrityToken`. Can then be used multiple times to generate multiple poTokens with
         * [generatePoToken].
         *
         * @param context used e.g. to load the HTML asset or to instantiate a WebView
         */
        fun newPoTokenGenerator(context: Context): Single<PoTokenGenerator>
    }

    //region Load HTML
    protected fun loadPoTokenHtml(context: Context, handleHtml: (html: String) -> Unit) {
        disposables.add(
            Single.fromCallable {
                val html = context.assets.open("po_token.html").bufferedReader()
                    .use { it.readText() }
                return@fromCallable html
            }
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(handleHtml, this::onInitializationErrorCloseAndCancel)
        )
    }
    //endregion

    //region Network requests
    /**
     * Makes a POST request to [url] with the given [data] by setting the correct headers. Calls
     * [onInitializationErrorCloseAndCancel] in case of any network errors and also if the response
     * does not have HTTP code 200, therefore this is supposed to be used only during
     * initialization. Calls [handleResponseBody] with the response body if the response is
     * successful. The request is performed in the background and a disposable is added to
     * [disposables].
     */
    private fun makeBotguardServiceRequest(
        url: String,
        data: String,
        handleResponseBody: (responseBody: String) -> Unit,
    ) {
        disposables.add(
            Single.fromCallable {
                return@fromCallable DownloaderImpl.getInstance().post(
                    url,
                    mapOf(
                        // replace the downloader user agent
                        "User-Agent" to listOf(USER_AGENT),
                        "Accept" to listOf("application/json"),
                        "Content-Type" to listOf("application/json+protobuf"),
                        "x-goog-api-key" to listOf(GOOGLE_API_KEY),
                        "x-user-agent" to listOf("grpc-web-javascript/0.1"),
                    ),
                    data.toByteArray()
                )
            }
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                    { response ->
                        val httpCode = response.responseCode()
                        if (httpCode != 200) {
                            onInitializationErrorCloseAndCancel(
                                PoTokenException("Invalid response code: $httpCode")
                            )
                            return@subscribe
                        }
                        val responseBody = response.responseBody()
                        handleResponseBody(responseBody)
                    },
                    this::onInitializationErrorCloseAndCancel
                )
        )
    }

    protected fun makeBotguardCreateRequest(
        handleResponseBody: (responseBody: String) -> Unit
    ) {
        makeBotguardServiceRequest(
            "https://www.youtube.com/api/jnn/v1/Create",
            "[ \"$REQUEST_KEY\" ]",
            handleResponseBody
        )
    }

    protected fun makeBotguardGenerateITRequest(
        botguardResponse: String,
        handleIntegrityToken: (integrityToken: String) -> Unit
    ) {
        makeBotguardServiceRequest(
            "https://www.youtube.com/api/jnn/v1/GenerateIT",
            "[ \"$REQUEST_KEY\", \"$botguardResponse\" ]",
        ) { responseBody ->
            if (BuildConfig.DEBUG) {
                Log.d(TAG, "GenerateIT response: $responseBody")
            }

            val (integrityToken, expirationTimeInSeconds) = parseIntegrityTokenData(responseBody)

            // leave 10 minutes of margin just to be sure
            expirationInstant = Instant.now().plusSeconds(expirationTimeInSeconds - 600)

            handleIntegrityToken(integrityToken)
        }
    }
    //endregion

    //region Close
    /**
     * Handles any error happening during initialization, releasing resources as [close] would do
     * and sending the error to [generatorEmitter] after releasing the resources has completed.
     */
    protected abstract fun onInitializationErrorCloseAndCancel(error: Throwable)

    /**
     * Disposes [disposables], disposing any network/io request. Must be overridden to also release
     * the resources of the used web browser implementation (if any); remember `super.close()`!
     */
    @CallSuper
    override fun close() {
        disposables.dispose()
    }
    //endregion

    companion object {
        val TAG = PoTokenGenerator::class.simpleName

        // Public API key used by BotGuard, which has been got by looking at BotGuard requests
        const val GOOGLE_API_KEY = "AIzaSyDyT5W0Jh49F30Pqqtyfdf7pDLFKLJoAnw" // NOSONAR
        const val REQUEST_KEY = "O43z0dpjhgX20SCx4KAo"
        const val USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
            "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.3"
    }
}
